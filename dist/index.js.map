{"version":3,"sources":["../src/actions/createToken.ts","../src/client.ts","../src/keypairUtils.ts","../src/actions/swap.ts","../src/actions/lend.ts","../src/actions/stake.ts","../src/actions/transfer.ts","../src/actions/getTokenInfo.ts","../src/actions/gibwork.ts","../src/index.ts"],"sourcesContent":["import {\n    type ActionExample,\n    composeContext,\n    type Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { getSAK } from \"../client\";\nexport interface CreateTokenContent extends Content {\n    name: string;\n    uri: string;\n    symbol: string;\n    decimals: number;\n    initialSupply: number;\n}\n\nfunction isCreateTokenContent(content: any): content is CreateTokenContent {\n    elizaLogger.log(\"Content for createToken\", content);\n    return (\n        typeof content.name === \"string\" &&\n        typeof content.uri === \"string\" &&\n        typeof content.symbol === \"string\" &&\n        typeof content.decimals === \"number\" &&\n        typeof content.initialSupply === \"number\"\n    );\n}\n\nconst createTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"name\": \"Example Token\",\n    \"symbol\": \"EXMPL\",\n    \"uri\": \"https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png\",\n    \"decimals\": 18,\n    \"initialSupply\": 1000000,\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Token name\n- Token symbol\n- Token uri\n- Token decimals\n- Token initialSupply\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"CREATE_TOKEN\",\n    similes: [\"DEPLOY_TOKEN\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => true,\n    description: \"Create tokens\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting CREATE_TOKEN handler...\");\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: createTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate transfer content\n        if (!isCreateTokenContent(content)) {\n            elizaLogger.error(\"Invalid content for CREATE_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process create token request. Invalid content provided.\",\n                    content: { error: \"Invalid create token content\" },\n                });\n            }\n            return false;\n        }\n\n        elizaLogger.log(\"Init solana agent kit...\");\n        const solanaAgentKit = await getSAK(runtime);\n        try {\n            const deployedAddress = await solanaAgentKit.deployToken(\n                content.name,\n                content.uri,\n                content.symbol,\n                content.decimals\n                // content.initialSupply comment out this cause the sdk has some issue with this parameter\n            );\n            elizaLogger.log(\"Create successful: \", deployedAddress);\n            elizaLogger.log(deployedAddress);\n            if (callback) {\n                callback({\n                    text: `Successfully create token ${content.name}`,\n                    content: {\n                        success: true,\n                        deployedAddress,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            if (callback) {\n                elizaLogger.error(\"Error during create token: \", error);\n                callback({\n                    text: `Error creating token: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create token, name is Example Token, symbol is EXMPL, uri is https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png, decimals is 9, initialSupply is 100000000000\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll create token now...\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully create token 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { SolanaAgentKit } from \"solana-agent-kit\";\nimport type { IAgentRuntime } from \"@elizaos/core\";\nimport { getWalletKey } from \"./keypairUtils\";\nimport bs58 from \"bs58\";\n\nexport async function getSAK(runtime: IAgentRuntime) {\n    const {publicKey} = await getWalletKey(runtime, false);\n    const {keypair} = await getWalletKey(runtime, true);\n\n    if (keypair.publicKey.toBase58() !== publicKey.toBase58()) {\n        throw new Error(\n            \"Generated public key doesn't match expected public key\"\n        );\n    }\n\n    return new SolanaAgentKit(\n        bs58.encode(keypair.secretKey),\n        runtime.getSetting(\"SOLANA_RPC_URL\"),\n        {\n            OPENAI_API_KEY: runtime.getSetting(\"OPENAI_API_KEY\"),\n        }\n    );\n}","import { Keypair, PublicKey } from \"@solana/web3.js\";\nimport { DeriveKeyProvider, TEEMode } from \"@elizaos/plugin-tee\";\nimport bs58 from \"bs58\";\nimport { type IAgentRuntime, elizaLogger } from \"@elizaos/core\";\n\nexport interface KeypairResult {\n    keypair?: Keypair;\n    publicKey?: PublicKey;\n}\n\n/**\n * Gets either a keypair or public key based on TEE mode and runtime settings\n * @param runtime The agent runtime\n * @param requirePrivateKey Whether to return a full keypair (true) or just public key (false)\n * @returns KeypairResult containing either keypair or public key\n */\nexport async function getWalletKey(\n    runtime: IAgentRuntime,\n    requirePrivateKey = true\n): Promise<KeypairResult> {\n    const teeMode = runtime.getSetting(\"TEE_MODE\") || TEEMode.OFF;\n\n    if (teeMode !== TEEMode.OFF) {\n        const walletSecretSalt = runtime.getSetting(\"WALLET_SECRET_SALT\");\n        if (!walletSecretSalt) {\n            throw new Error(\n                \"WALLET_SECRET_SALT required when TEE_MODE is enabled\"\n            );\n        }\n\n        const deriveKeyProvider = new DeriveKeyProvider(teeMode);\n        const deriveKeyResult = await deriveKeyProvider.deriveEd25519Keypair(\n            \"/\",\n            walletSecretSalt,\n            runtime.agentId\n        );\n\n        return requirePrivateKey\n            ? { keypair: deriveKeyResult.keypair }\n            : { publicKey: deriveKeyResult.keypair.publicKey };\n    }\n\n    // TEE mode is OFF\n    if (requirePrivateKey) {\n        const privateKeyString =\n            runtime.getSetting(\"SOLANA_PRIVATE_KEY\") ??\n            runtime.getSetting(\"WALLET_PRIVATE_KEY\");\n\n        if (!privateKeyString) {\n            throw new Error(\"Private key not found in settings\");\n        }\n\n        try {\n            // First try base58\n            const secretKey = bs58.decode(privateKeyString);\n            return { keypair: Keypair.fromSecretKey(secretKey) };\n        } catch (e) {\n            elizaLogger.log(\"Error decoding base58 private key:\", e);\n            try {\n                // Then try base64\n                elizaLogger.log(\"Try decoding base64 instead\");\n                const secretKey = Uint8Array.from(\n                    Buffer.from(privateKeyString, \"base64\")\n                );\n                return { keypair: Keypair.fromSecretKey(secretKey) };\n            } catch (e2) {\n                elizaLogger.error(\"Error decoding private key: \", e2);\n                throw new Error(\"Invalid private key format\");\n            }\n        }\n    } else {\n        const publicKeyString =\n            runtime.getSetting(\"SOLANA_PUBLIC_KEY\") ??\n            runtime.getSetting(\"WALLET_PUBLIC_KEY\");\n\n        if (!publicKeyString) {\n            throw new Error(\"Public key not found in settings\");\n        }\n\n        return { publicKey: new PublicKey(publicKeyString) };\n    }\n}\n","import {\n    type ActionExample,\n    composeContext,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    settings,\n    type State,\n    type Action,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { ACTIONS } from \"solana-agent-kit\";\nimport { getSAK } from \"../client\";\n\nconst TRADE_ACTION = ACTIONS.TRADE_ACTION;\n\nconst swapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"inputTokenSymbol\": \"SOL\",\n    \"outputTokenSymbol\": \"USDC\",\n    \"inputTokenCA\": \"So11111111111111111111111111111111111111112\",\n    \"outputTokenCA\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"amount\": 1.5\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages and wallet information below:\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token symbol (the token being sold)\n- Output token symbol (the token being bought)\n- Input token contract address if provided\n- Output token contract address if provided\n- Amount to swap\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined. The result should be a valid JSON object with the following schema:\n\\`\\`\\`json\n{\n    \"inputTokenSymbol\": string | null,\n    \"outputTokenSymbol\": string | null,\n    \"inputTokenCA\": string | null,\n    \"outputTokenCA\": string | null,\n    \"amount\": number | string | null\n}\n\\`\\`\\``;\n\n// if we get the token symbol but not the CA, check walet for matching token, and if we have, get the CA for it\n\nexport default {\n    name: TRADE_ACTION.name,\n    similes: TRADE_ACTION.similes,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        // Check if the necessary parameters are provided in the message\n        elizaLogger.log(\"Message:\", message);\n        return true;\n    },\n    description: TRADE_ACTION.description,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        const sak = await getSAK(runtime);\n        // composeState\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const swapContext = composeContext({\n            state,\n            template: swapTemplate,\n        });\n\n        const response = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        elizaLogger.log(\"Response:\", response);\n        // const type = response.inputTokenSymbol?.toUpperCase() === \"SOL\" ? \"buy\" : \"sell\";\n\n        // Add SOL handling logic\n        if (response.inputTokenSymbol?.toUpperCase() === \"SOL\") {\n            response.inputTokenCA = settings.SOL_ADDRESS;\n        }\n        if (response.outputTokenSymbol?.toUpperCase() === \"SOL\") {\n            response.outputTokenCA = settings.SOL_ADDRESS;\n        }\n\n        if (!response.amount) {\n            elizaLogger.log(\"No amount provided, skipping swap\");\n            const responseMsg = {\n                text: \"I need the amount to perform the swap\",\n            };\n            callback?.(responseMsg);\n            return true;\n        }\n\n        // TODO: if response amount is half, all, etc, semantically retrieve amount and return as number\n        if (!response.amount) {\n            elizaLogger.log(\"Amount is not a number, skipping swap\");\n            const responseMsg = {\n                text: \"The amount must be a number\",\n            };\n            callback?.(responseMsg);\n            return true;\n        }\n        try {\n            const connection = new Connection(\n                \"https://api.mainnet-beta.solana.com\"\n            );\n\n            // const provider = new WalletProvider(connection, walletPublicKey);\n\n            console.log(\"Wallet Public Key:\", sak.wallet_address.toString());\n            console.log(\"inputTokenSymbol:\", response.inputTokenCA);\n            console.log(\"outputTokenSymbol:\", response.outputTokenCA);\n            console.log(\"amount:\", response.amount);\n\n            const txid = await sak.trade(\n                new PublicKey(response.outputTokenCA),\n                response.amount,\n                new PublicKey(response.inputTokenCA),\n            );\n\n            const latestBlockhash = await connection.getLatestBlockhash();\n\n            const confirmation = await connection.confirmTransaction(\n                {\n                    signature: txid,\n                    blockhash: latestBlockhash.blockhash,\n                    lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n                },\n                \"confirmed\"\n            );\n\n            if (confirmation.value.err) {\n                throw new Error(\n                    `Transaction failed: ${confirmation.value.err}`\n                );\n            }\n\n            if (confirmation.value.err) {\n                throw new Error(\n                    `Transaction failed: ${confirmation.value.err}`\n                );\n            }\n\n            elizaLogger.log(\"Swap completed successfully!\");\n            elizaLogger.log(`Transaction ID: ${txid}`);\n\n            const responseMsg = {\n                text: `Swap completed successfully! Transaction ID: ${txid}`,\n            };\n\n            callback?.(responseMsg);\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token swap:\", error);\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    inputTokenSymbol: \"SOL\",\n                    outputTokenSymbol: \"USDC\",\n                    amount: 0.1,\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Swapping 0.1 SOL for USDC...\",\n                    action: \"TOKEN_SWAP\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Swap completed successfully! Transaction ID: ...\",\n                },\n            },\n        ],\n        // Add more examples as needed\n    ] as ActionExample[][],\n} as Action;\n","import { elizaLogger } from \"@elizaos/core\";\nimport {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\nimport { ACTIONS } from \"solana-agent-kit\";\nimport { getSAK } from \"../client\";\n\nconst LEND_ASSET_ACTION = ACTIONS.LEND_ASSET_ACTION;\n\nexport interface LendAssetContent extends Content {\n    amount: number;\n}\n\nfunction isLendAssetContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is LendAssetContent {\n    elizaLogger.log(\"Content for lend\", content);\n    return (\n        typeof content.amount === \"number\"\n    );\n}\n\nconst lendTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"amount\": \"100\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the lending request:\n- Amount of USDC to lend\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: LEND_ASSET_ACTION.name,\n    similes: LEND_ASSET_ACTION.similes,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Validating lend asset from user:\", message.userId);\n        return false;\n    },\n    description: LEND_ASSET_ACTION.description,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting LEND_ASSET handler...\");\n        const sak = await getSAK(runtime);\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose lend context\n        const lendContext = composeContext({\n            state,\n            template: lendTemplate,\n        });\n\n        // Generate lend content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: lendContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate lend content\n        if (!isLendAssetContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for LEND_ASSET action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process lending request. Invalid content provided.\",\n                    content: { error: \"Invalid lend content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const lendResult = await sak.lendAssets(\n\n                content.amount\n            );\n\n            console.log(\"Lend result:\", lendResult);\n\n            if (callback) {\n                callback({\n                    text: `Successfully lent ${content.amount} USDC`,\n                    content: {\n                        success: true,\n                        lendResult: lendResult,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during lending:\", error);\n            if (callback) {\n                callback({\n                    text: `Error lending asset: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to lend 100 USDC\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Lend 100 USDC\",\n                    action: \"LEND_ASSET\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully lent 100 USDC\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;","import { elizaLogger } from \"@elizaos/core\";\nimport {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\nimport { ACTIONS } from \"solana-agent-kit\";\nimport { getSAK } from \"../client\";\n\nconst STAKE_ACTION = ACTIONS.STAKE_WITH_JUP_ACTION;\n\nexport interface StakeContent extends Content {\n    amount: number;\n}\n\nfunction isStakeContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is StakeContent {\n    elizaLogger.log(\"Content for stake\", content);\n    return (\n        typeof content.amount === \"number\"\n    );\n}\n\nconst stakeTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"amount\": \"100\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the staking request:\n- Amount to stake\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: STAKE_ACTION.name,\n    similes: STAKE_ACTION.similes,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Validating stake from user:\", message.userId);\n        return false;\n    },\n    description: STAKE_ACTION.description,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting STAKE handler...\");\n        const sak = await getSAK(runtime);\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose stake context\n        const stakeContext = composeContext({\n            state,\n            template: stakeTemplate,\n        });\n\n        // Generate stake content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: stakeContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate stake content\n        if (!isStakeContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for STAKE action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process staking request. Invalid content provided.\",\n                    content: { error: \"Invalid stake content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const stakeResult = await sak.stake(\n                content.amount\n            );\n\n            console.log(\"Stake result:\", stakeResult);\n\n            if (callback) {\n                callback({\n                    text: `Successfully staked ${content.amount} tokens`,\n                    content: {\n                        success: true,\n                        tx: stakeResult,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during staking:\", error);\n            if (callback) {\n                callback({\n                    text: `Error staking: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to stake 100 tokens\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Stake 100 tokens\",\n                    action: \"STAKE_WITH_JUP\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully staked 100 tokens\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;","\nimport { elizaLogger,  } from \"@elizaos/core\";\n\nimport {\n    PublicKey,\n\n} from \"@solana/web3.js\";\n\nimport {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\nimport { ACTIONS } from \"solana-agent-kit\";\nimport { getSAK } from \"../client\";\n\nconst TRANSFER_ACTION = ACTIONS.TRANSFER_ACTION;\n\nexport interface TransferContent extends Content {\n    tokenAddress: string;\n    recipient: string;\n    amount: string | number;\n}\n\nfunction isTransferContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is TransferContent {\n    elizaLogger.log(\"Content for transfer\", content);\n    return (\n        typeof content.tokenAddress === \"string\" &&\n        typeof content.recipient === \"string\" &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\")\n    );\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump\",\n    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n    \"amount\": \"1000\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Token contract address\n- Recipient wallet address\n- Amount to transfer\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: TRANSFER_ACTION.name,\n    similes: TRANSFER_ACTION.similes,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Validating transfer from user:\", message.userId);\n        //add custom validate logic here\n        /*\n            const adminIds = runtime.getSetting(\"ADMIN_USER_IDS\")?.split(\",\") || [];\n            //elizaLogger.log(\"Admin IDs from settings:\", adminIds);\n\n            const isAdmin = adminIds.includes(message.userId);\n\n            if (isAdmin) {\n                //elizaLogger.log(`Authorized transfer from user: ${message.userId}`);\n                return true;\n            }\n            else\n            {\n                //elizaLogger.log(`Unauthorized transfer attempt from user: ${message.userId}`);\n                return false;\n            }\n            */\n        return false;\n    },\n    description: TRANSFER_ACTION.description,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\n        const sak = await getSAK(runtime);\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate transfer content\n        if (!isTransferContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n\n            const mintPubkey = new PublicKey(content.tokenAddress);\n            const recipientPubkey = new PublicKey(content.recipient);\n\n\n            const txId = await sak.transfer(recipientPubkey, Number(content.amount), mintPubkey)\n\n            console.log(\"Transfer successful:\", txId);\n\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${content.amount} tokens to ${content.recipient}\\nTransaction: ${txId}`,\n                    content: {\n                        success: true,\n                        signature : txId,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 69 EZSIS BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 69 EZSIS tokens now...\",\n                    action: \"SEND_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 69 EZSIS tokens to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\\nTransaction: 5KtPn3DXXzHkb7VAVHZGwXJQqww39ASnrf7YkyJoF2qAGEpBEEGvRHLnnTG8ZVwKqNHMqSckWVGnsQAgfH5pbxEb\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","\nimport { elizaLogger,  } from \"@elizaos/core\";\nimport {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\nimport { ACTIONS } from \"solana-agent-kit\";\nimport { getSAK } from \"../client\";\n\nconst GET_TOKEN_INFO_ACTION = ACTIONS.GET_TOKEN_DATA_ACTION;\n\nexport interface GetTokenInfoContent extends Content {\n    tokenAddress: string;\n}\n\nfunction isGetTokenInfoContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is GetTokenInfoContent {\n    elizaLogger.log(\"Content for transfer\", content);\n    return (\n        typeof content.tokenAddress === \"string\"\n    );\n}\n\nconst getTokenInfoTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token:\n- Token contract address\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: GET_TOKEN_INFO_ACTION.name,\n    similes: GET_TOKEN_INFO_ACTION.similes,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Validating get token info from user:\", message.userId);\n\n        return false;\n    },\n    description: GET_TOKEN_INFO_ACTION.description,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting GET_TOKEN_INFO handler...\");\n        const sak = await getSAK(runtime);\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose get token info context\n        const getTokenInfoContext = composeContext({\n            state,\n            template: getTokenInfoTemplate,\n        });\n\n        // Generate get token info content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: getTokenInfoContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate get token info content\n        if (!isGetTokenInfoContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for GET_TOKEN_INFO action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process get token info request. Invalid content provided.\",\n                    content: { error: \"Invalid get token info content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n\n            const tokenData = await sak.getTokenDataByAddress(content.tokenAddress)\n\n            console.log(\"Token data:\", tokenData);\n\n            if (callback) {\n                callback({\n                    text: `Successfully retrieved token data for ${content.tokenAddress}`,\n                    content: {\n                        success: true,\n                        tokenData: tokenData,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during get token info:\", error);\n            if (callback) {\n                callback({\n                    text: `Error getting token info: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get token info for SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Get token info for SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\n                    action: \"GET_TOKEN_INFO\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully retrieved token info for SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { elizaLogger } from \"@elizaos/core\";\nimport {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\nimport { ACTIONS } from \"solana-agent-kit\";\nimport { getSAK } from \"../client\";\n\nconst GIBWORK_ACTION = ACTIONS.CREATE_GIBWORK_TASK_ACTION;\n\nexport interface GibWorkContent extends Content {\n    title: string;\n    content: string;\n    requirements: string;\n    tags: string[];\n    tokenMintAddress: string;\n    tokenAmount: number;\n}\n\nfunction isGibWorkContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is GibWorkContent {\n    elizaLogger.log(\"Content for gibwork\", content);\n    return (\n        typeof content.title === \"string\" &&\n        typeof content.content === \"string\" &&\n        typeof content.requirements === \"string\" &&\n        Array.isArray(content.tags) &&\n        typeof content.tokenMintAddress === \"string\" &&\n        typeof content.tokenAmount === \"number\"\n    );\n}\n\nconst gibworkTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"title\": \"Build a Solana dApp\",\n    \"content\": \"Create a simple Solana dApp with React frontend\",\n    \"requirements\": \"Experience with Rust and React\",\n    \"tags\": [\"solana\", \"rust\", \"react\"],\n    \"tokenMintAddress\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"tokenAmount\": 100\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the GibWork task:\n- Title of the task\n- Content/description of the task\n- Requirements for the task\n- Tags related to the task\n- Token mint address for payment\n- Token amount for payment\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: GIBWORK_ACTION.name,\n    similes: GIBWORK_ACTION.similes,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Validating gibwork task from user:\", message.userId);\n        return false;\n    },\n    description: GIBWORK_ACTION.description,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting CREATE_GIBWORK_TASK handler...\");\n        const sak = await getSAK(runtime);\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose gibwork context\n        const gibworkContext = composeContext({\n            state,\n            template: gibworkTemplate,\n        });\n\n        // Generate gibwork content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: gibworkContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate gibwork content\n        if (!isGibWorkContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for CREATE_GIBWORK_TASK action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process GibWork task creation. Invalid content provided.\",\n                    content: { error: \"Invalid gibwork content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const gibworkResult = await sak.createGibworkTask(\n                content.title,\n                content.content,\n                content.requirements,\n                content.tags,\n                content.tokenMintAddress,\n                content.tokenAmount\n            );\n\n            console.log(\"GibWork task creation result:\", gibworkResult);\n\n            if (callback) {\n                callback({\n                    text: `Successfully created GibWork task: ${content.title}`,\n                    content: {\n                        success: true,\n                        gibworkResult: gibworkResult,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during GibWork task creation:\", error);\n            if (callback) {\n                callback({\n                    text: `Error creating GibWork task: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a GibWork task for building a Solana dApp, offering 100 USDC\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Creating GibWork task\",\n                    action: \"CREATE_GIBWORK_TASK\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully created GibWork task: Build a Solana dApp\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;","import type { Plugin } from \"@elizaos/core\";\nimport createToken from \"./actions/createToken.ts\";\nimport swap from \"./actions/swap.ts\";\nimport lend from \"./actions/lend.ts\";\nimport stake from \"./actions/stake.ts\";\nimport transfer from \"./actions/transfer.ts\";\nimport getTokenInfo from \"./actions/getTokenInfo.ts\";\nimport gibwork from \"./actions/gibwork.ts\";\n\nexport const solanaAgentkitPlugin: Plugin = {\n    name: \"solana\",\n    description: \"Solana Plugin with solana agent kit for Eliza\",\n    actions: [createToken, swap, lend, stake, transfer, getTokenInfo, gibwork],\n    evaluators: [],\n    providers: [],\n};\n\nexport default solanaAgentkitPlugin;\n"],"mappings":"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","names":["elizaLogger","bs58","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","PublicKey","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","PublicKey","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","PublicKey","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","PublicKey","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass"]}